## 개발 계획

#### 환경설정
- 배포는 오라클 클라우드로 결정! 상시 무료에 무료계정에서 돈나갈일이 없다는게 큰 장점인듯함.
- aws를 쓰면 좋겠지만, 회사가 아닌이상에야 과금의 부담이 너무 커서, 회사 및 공부용으로만 일단 쓸듯하다.

도메인은 데일리 메이플 or 메이플 노트 이 괜찮아 보임

완료 ✅ | 진행중 ❎

-----

1. 투두리스트 제작 :: 디자인 ❎ / 기능 ✅

2. 투두리스트에서 체크한 내용을 완료 전 => 완료 후 리스트로 이동 할 수 있는 기능 제작 :: 디자인 ❎ / 기능 ✅

3. 캐릭터 설정시 크롤링으로 이미지, 레벨까지 불러오게 하고 캐릭터 정보 DB에 저장 :: 디자인 ❎ / 기능 ✅

4. 캐릭터별로 투두리스트 불러오는 기능 제작 :: 디자인 ❎ / 기능 ✅

5. 일퀘 = 일 초기화 주간(월) = 월 초기화, 주간(목) = 목 초기화, 월간(월) 월 1일 초기화 :: 디자인 ❎ / 기능 ❎

6. 관리자 공통 / 개인이 추가한 투두 프리셋으로 나누기 :: 디자인 ❎ / 기능 ❎

2023-08-15 대격변 이후 ~
할일 생각중 ...

1. 일단 테스트로 일일/주간/월간이 잘 초기화 되는지 확인 ✅

2. 프리셋을 개인당 얼마까지 허용가능하게 할것인가.

3. 새 프리셋 등록 이외에 관리자 프리셋 불러오기 같은 기능 개발

4. 가끔씩 이유 모를? react-query에서 불러오는 데이터가 동기가 안맞아 에러 페이지가 뜰때가 있는데
주로 vscode save할때마다 발생하는 거 같으므로 현재 개발시에는 크게 우려되는 사항은 아니나, 추후 사용자에겐 절대 노출 되지 못하게 해야할 것

5. 새 프리셋 등록란에서 모달창안에서 기존 프리셋 삭제도 가능하게끔 할 것, 저장시 적용되는 것도 같음 ✅

6. 초기화 이후, 기존 프리셋 완료 내역이 있으면, 잘 업데이트 되는지 확인해볼것 ✅ // 오류나서 수정완료

7. 아그리고 제일 중요한게 completed_date가 만약에 기존 프리셋 완료 내역이 있으면, 업데이트 되는지 확인해볼것 만약에 안된다면 수동으로 completed_date를 갱신하는 방향으로 가야할 거같다. ✅ // 오류나서 수정완료

8. 프리셋 등록시 이미지도 등록 가능하게 끔, 수정시에는 기존 이미지 삭제 후 업로드 등 이미지 처리에도 신경을 써야할거같다.

9. 뭐 당연한 거겠지만 전체적인 디자인을 변경해야할것같다. 기존 뼈대는 괜찮다고 생각하지만, 전반적인 디자인을 신경 쓰도록하자.

10. 다크모드 제작 및 theme 으로 뭔가 light / dark 나눠서 css 설정해야할것같은데, 타입스크립트라 충돌이 있는거 같다. 이것도 추후 생각해보자.

11. 정렬 기능 제작, 데이터베이스 컬럼에 정렬키를 추가하여 해당 정렬키를 통해서 정렬하도록 하자 ✅ // order_no으로 완료 배열, 프리셋 배열 각각 적용 완료

12. 리스트간 드래그로 순서 바꾸기 기능 제작 ✅

13. 로그 출력 기능은 개인당 예를 들어 텍스트문서 5000줄까지의 용량을 할당하고, 5000줄이 차면 0 줄로 초기화하는 식으로 한다.(지우는 시점은 정각이며, 테러방지용으로 기준의 2배인 1만줄이 넘으면 자동으로 지워지는 것으로한다.) 단순히 몇일에 뭐했는지를 알려주기 위함일뿐 다른 용도는 X

14. 캐릭터 갱신 기능(최신화)

15. 캐릭터 목록 등록시 리스트 아래에 등록되게 하고, 바로 액티브 되는 현상 막고, 기존 액티브 유지하게 하기
































-----------




import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import * as http from 'http';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  const server = http.createServer(app);
  const io = require('socket.io')(server);

  io.on('connection', (socket) => {
    console.log('Client connected');

    socket.on('registerPreset', (presetName) => {
      const logMessage = `User registered a preset: ${presetName}`;
      io.emit('newLog', logMessage);
    });

    socket.on('disconnect', () => {
      console.log('Client disconnected');
    });
  });

  await app.listen(3000);
}
bootstrap();



Client

-----



import React, { useState } from 'react';
import './App.css';
import io from 'socket.io-client';

const socket = io.connect('http://localhost:3000'); // Change to your server address

function App() {
  const [presetName, setPresetName] = useState('');
  const [logs, setLogs] = useState([]);

  socket.on('newLog', (logMessage) => {
    setLogs((prevLogs) => [...prevLogs, logMessage]);
  });

  const handleRegisterPreset = () => {
    socket.emit('registerPreset', presetName);
  };

  return (
    <div className="App">
      <h1>Socket.io Example</h1>
      <div>
        <input
          type="text"
          placeholder="Enter preset name"
          value={presetName}
          onChange={(e) => setPresetName(e.target.value)}
        />
        <button onClick={handleRegisterPreset}>Register Preset</button>
      </div>
      <div>
        <h2>Logs:</h2>
        <ul>
          {logs.map((log, index) => (
            <li key={index}>{log}</li>
          ))}
        </ul>
      </div>
    </div>
  );
}

export default App;
